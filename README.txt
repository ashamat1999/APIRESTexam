README
THIS WEB APP WAS DESIGN TO SOLVE IA'S SOFTWARE ENGINEER EXAM.
TO RUN THE LOCAL SERVER, RUN runserver.py FILE.

THIS WEB APP ALLOWS USER TO CREATE, READ, UPDATE, DELETE PRODUCTS THROUGH AN API
ALSO, THROUGH API USER CAN CREATE ORDERS, AND THEN, USER CAN MANAGE THEM IN WEB APP.

INVENTORY OF PRODUCTS AND ORDERLIST ARE SAVED IN TXT FILES.
FOLDER ALREADY CONTAINS SOME PRODUCTS AND ORDERS IN "inventory.txt" AND "orderList.txt"
TO CREATE A PRODUCT SEND A POST REQUEST TO:
	localhost:9090/products
WITH THIS JSON STRUCTURE:
	{ "sku":"STRING","name":"STRING","stock":INTEGER,"price": FLOAT }
EXAMPLE:
	{ "sku":"A6","name":"TACOS","stock":4,"price": 14.50 }
THIS JSON IS FORMED BY 4 KEYS:
"sku" = this key needs a string as value
"name"= this key needs a string as value
"stock"= this key needs a integer as value
"price"= this key needs a float as value

THE API CAN DETECT IF ANY PRODUCT IN INVENTORY HAVE SAME SKU THAT THE ONE THAT USER TRY TO SAVE, IF THIS OCCURS, PRODUCT WON'T BE SAVE AND USER IS GOING TO RECEIVE THIS JSON RESPONSE:
{ "message": "SKU already added, cannot save data." }

TO READ ALL PRODUCTS IN INVENTORY SEND A GET REQUEST TO:
	localhost:9090/products

TO READ A PRODUCT SEND A GET REQUEST TO:
	localhost:9090/products/<string:sku>
	EXAMPLE
	localhost:9090/products/A6

TO UPDATE A PRODUCT SEND A PUT REQUEST TO:
	localhost:9090/products/<string:sku>
	EXAMPLE
	localhost:9090/products/A6
NOTE THAT THE SKU IN <string:sku> IS THE PRODUCT THAT WILL BE MODIFIED.
WITH THIS JSON STRUCTURE: 
{ "sku":"STRING","name":"STRING","stock":INTEGER,"price": FLOAT }
THIS JSON IS FORMED BY 4 KEYS:
"sku" = sku of product, this key needs a string as value
"name"= name of product, this key needs a string as value
"stock"= stock of product, this key needs a integer as value
"price"= price of product, this key needs a float as value

TO DELETE A PRODUCT SEND A DELETE REQUEST TO:
	localhost:9090/products/<string:sku>
	EXAMPLE
	localhost:9090/products/A6
NOTE THAT THE SKU IN <string:sku> IS THE PRODUCT THAT WILL BE DELETED.

TO CREATE AN ORDER SEND A POST REQUEST TO:
	localhost:9090/orders
WITH THIS JSON STRUCTURE: 
	{ "table":INTEGER,"productSKUS": ["STRING",...,"STRING"] }
	EXAMPLE
	{ "table":1,"productsSKUS": ["A4","A5"] }
THIS JSON IS FORMED BY 2 KEYS:
"table" = represents a table of the restaurant, this key needs a integer as value
"productSKUS" = represents the list of products in order, this keys need a list of string with every product's sku to make the order.
THIS REQUEST WILL CREATE AN AUTOMATIC ID FOR THE NEW ORDER, WILL CALCULATE THE TOTAL TO PAY OF THE ORDER AND ASIGN THE 'pending' STATUS TO ORDER. ALSO, THIS REQUEST IS GOING TO DECREASE STOCK OF EVERY PRODUCT IN productsSKUS. THIS REQUEST ALWAYS RETURN A JSON RESPONSE, IN alert KEY OF THIS RESPONSE CAN IDENTIFY IF SOME PRODUCT NEEDS TO BE PROVIDED.

ONCE USER CREATED PRODUCTS AND ORDERS, USER CAN MANAGE ORDERS THROUGH WEB APP, TO GET IN, VISIT IN A WEB BROWSER:
	localhost:9090/

DUE TO THE NATURE OF THIS PROJECT, USER DON'T PASS THROUGH LOGIN PAGE OR MAIN PAGE, IT IS DIRECTLY REDIRECTED TO WATCH THE PENDING ORDERS.

IN WEB APP IS A TOP VAR MENU IN WICH USER CAN NAVIGATE THROUGH PENDING ORDERS, ORDERS IN PROCESS, COMPLETED ORDERS, ORDERS DELIVERED AND CANCELED ORDERS.

PENDING ORDERS PAGE SHOWS ALL THE PENDING (OR NEW) ORDERS, EACH ORDER HAVE 2 BUTTONS:
Start order = BUTTON TO START TO PROCESS THE ORDER. ESCENTYALLY THIS CHANGE ORDER'S STATUS TO "processing".
Cancel order = BUTTON TO CANCEL AN ORDER. ESCENTYALLY THIS CHANGE ORDER'S STATUS TO "canceled".

ORDERS IN PROCESS PAGE SHOWS ALL THE ORDERS WHICH ARE IN PROCESS, EACH ORDER HAVE 2 BUTTONS:
Complete order = BUTTON TO COMPLETE THE ORDER. ESCENTYALLY THIS CHANGE ORDER'S STATUS TO "completed".
Cancel order = BUTTON TO CANCEL AN ORDER. ESCENTYALLY THIS CHANGE ORDER'S STATUS TO "canceled".

COMPLETED ORDERS PAGE SHOWS ALL THE COMPLETED ORDERS, EACH ORDER HAVE 2 BUTTONS:
Deliver order = BUTTON TO COMPLETE THE ORDER. ESCENTYALLY THIS CHANGE ORDER'S STATUS TO "delivered".
Cancel order = BUTTON TO CANCEL AN ORDER. ESCENTYALLY THIS CHANGE ORDER'S STATUS TO "canceled".

DELIVERED ORDERS PAGE SHOWS ALL THE COMPLETED ORDERS WITHOUT ANY BUTTON.
CANCELED ORDERS PAGE SHOWS ALL THE COMPLETED ORDERS WITHOUT ANY BUTTON.




TECHNICAL INFORMATION:

BACKEND RUNS IN PYTHON 3.8.5, USING Flask 1.1.2 FRAMEWORK.
FRONTEND USES HTML, CSS, AND VUE.JS 2 AS FRONTEND FRAMEWORK, USING vuetifyjs AS COMPONENTS LIBRARY, FRONTEND ALSO USES JINJA (REQUIREMENT OF FLASK). VUE.JS IS NOT INSTALLED, IT IS IMPORT IN A SCRIPT IN HTML FILES.

ARCHITECTURAL PATTERN IS MODEL VIEW CONTROLLER. ALL DATA MODEL IS IN FOLDER "data" OF PROJECT, VIEW REPRESENTED IN HTML FILES IN FOLDER "templates", THE CONTROLLER IS restaurant_APItest.py

NOTE: ALL .py FILES TRY TO FOLLOW PEP808 STYLE GUIDE








